#################################################################################### Dashboard.html ####################################################################################
{% load static %}

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Dashboard</title>
  <link rel="stylesheet" href="{% static 'css/dashboard.css' %}">
</head>
<body>
  <div class="dashboard-container">
    <!-- Sidebar -->
    <div class="sidebar">
      <div class="user-profile">
        <div class="username">{{ user.username }}</div>
        <p>{{ user.email }}</p>
      </div>
      <ul class="nav-tabs">
        <li><a href="#" class="tab-link" data-tab="overview">Overview</a></li>
        <li><a href="#" class="tab-link" data-tab="energy">Energy Usage</a></li>
        <li><a href="#" class="tab-link" data-tab="bookings">My Bookings</a></li>
      </ul>
      <a href="{% url 'home' %}" class="btn back-home">Back to Home</a> <!-- Goes back to home -->
    </div>

    <!-- Main Content -->
    <div class="main-content">
      <!-- Overview Tab -->
      <div id="overview" class="tab-content">
        <div class="section-title">Dashboard Overview</div>
        <div class="card-container">
          <div class="card">
            <div class="card-title">Total Energy Usage</div>
            <div class="big-stat">{{ total_energy }} kWh</div>
            <p>Last 7 days</p>
          </div>

          <div class="card">
            <div class="card-title">Upcoming Bookings</div>
            <div class="big-stat">{{ upcoming_bookings.count }}</div>
            <p>Services scheduled</p>
          </div>

          <div class="card">
            <div class="card-title">Average Daily Usage</div>
            <div class="big-stat">{{ average_daily_usage }} kWh</div>
            <p>Energy consumption</p>
          </div>
        </div>

        <div class="chart-container">
          <div class="chart-title">Energy Consumption</div>
          <canvas id="overviewChart"></canvas>
        </div>
        <div class="section-title">Upcoming Services</div>
        {% if upcoming_bookings %}
          <div class="card-container">
            {% for booking in upcoming_bookings %}
              <div class="card">
                <div class="card-title">{{ booking.service_type }}</div>
                <p><strong>Date:</strong> {{ booking.date }}</p>
                <p>{{ booking.description|truncatechars:100 }}</p>
              </div>
            {% endfor %}
          </div>
        {% else %}
          <p>No upcoming bookings. <a href="{% url 'bookingservice' %}" class="btn">Book a service</a></p>
        {% endif %}
      </div>

      <!-- Energy Tab -->
      <div id="energy" class="tab-content">
        <div class="section-title">Energy Usage</div>
        <div class="chart-container">
          <canvas id="energyChart"></canvas>
        </div>
      </div>

      <!-- Bookings Tab -->
      <div id="bookings" class="tab-content active">
        <div class="section-title">My Bookings</div>

        <div style="margin-bottom: 20px;">
          <a href="{% url 'bookingservice' %}" class="btn">Book New Service</a>
        </div>

        {% if bookings %}
          <table class="bookings-table">
            <thead>
              <tr>
                <th>Service Type</th>
                <th>Date</th>
                <th>Description</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {% for booking in bookings %}
                <tr>
                  <td>{{ booking.service_type }}</td>
                  <td>{{ booking.date }}</td>
                  <td>{{ booking.description|truncatechars:50 }}</td>
                  <td>
                    <button class="btn btn-small edit-btn" data-booking-id="{{ booking.id }}" data-service-type="{{ booking.service_type }}" data-full-name="{{ booking.full_name }}" data-email="{{ booking.email }}" data-date="{{ booking.date|date:'Y-m-d' }}" data-description="{{ booking.description }}">Edit</button>
                  </td>
                </tr>
              {% endfor %}
            </tbody>
          </table>
        {% else %}
          <p>You haven't made any bookings yet.</p>
          <a href="{% url 'bookingservice' %}" class="btn">Book a Service</a>
        {% endif %}

        <!-- Edit Booking Modal -->
        <div id="editModal" class="modal">
          <div class="modal-content">
            <span class="close-modal">&times;</span>
            <div class="section-title">Edit Booking</div>
            <form method="post" action="{% url 'edit_booking' %}">
              {% csrf_token %}
              <input type="hidden" id="edit_booking_id" name="booking_id">
              
              <div class="form-group">
                <label for="editServiceType">Service Type</label>
                <select id="editServiceType" name="serviceType" required>
                  <option value="Consultation">Consultation</option>
                  <option value="Solar Panel Installation">Solar Panel Installation</option>
                </select>
              </div>

              <div class="form-group">
                <label for="editFullName">Full Name</label>
                <input type="text" id="editFullName" name="fullName" required>
              </div>

              <div class="form-group">
                <label for="editEmail">Email</label>
                <input type="email" id="editEmail" name="email" required>
              </div>

              <div class="form-group">
                <label for="editDate">Date</label>
                <input type="date" id="editDate" name="date" required>
              </div>

              <div class="form-group">
                <label for="editDescription">Description</label>
                <textarea id="editDescription" name="description" rows="3"></textarea>
              </div>

              <button type="submit" class="btn">Save Changes</button>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>


  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script type="application/json" id="dates-data">{{ dates_json|safe }}</script>
  <script type="application/json" id="values-data">{{ values_json|safe }}</script>
  <script src="{% static 'js/dashboard.js' %}"></script>
</body>
</html>

#################################################################################### dashboard.css ####################################################################################

body, p, ul, li, a, button, input, textarea, select {
    margin: 0;
    padding: 0;
    border: none;
    outline: none;
    box-sizing: border-box;
}


body {
    font-family: 'Arial', sans-serif;
    background-color: #121212;
    color: #ddd;
    line-height: 1.6;
}

/* Main container - makes everything sit nicely */
.dashboard-container {
    display: flex;
    min-height: 100vh;
}

/* Sidebar */
.sidebar {
    width: 200px;
    background-color: #1e1e1e;
    min-height: 100vh;
    padding: 20px;
    position: fixed;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
    z-index: 100; 
}

/* User profile section inside sidebar */
.user-profile {
    margin-bottom: 20px;
    text-align: center;
}

.username {
    font-weight: bold;
    font-size: 20px;
    margin-bottom: 5px;
    color: #fff;
}

/* Sidebar navigation tabs */
.nav-tabs {
    list-style: none;
    padding: 0;
    margin: 20px 0;
}

.nav-tabs li {
    margin-bottom: 10px;
}

/* Sidebar links */
.nav-tabs a,
.nav-tabs a.active {
    display: block;
    padding: 12px 20px;
    color: #ddd;
    text-decoration: none;
    border-left: 3px solid transparent;
    transition: background-color 0.3s, border-left-color 0.3s;
}

.nav-tabs a:hover {
    background-color: #2d2d2d;
    border-left-color: #2ecc71;
    color: #2ecc71;
}

.nav-tabs a.active {
    background-color: #2d2d2d;
    border-left-color: #2ecc71;
    color: #2ecc71;
}

/* Main content  pushes to the right of sidebar */
.main-content {
    flex: 1;
    margin-left: 250px; 
    padding: 20px;
    position: relative; 
    min-height: 100vh; 
}

/* Hide all tabs by default, then show active one */
.tab-content {
    display: none;
}

.tab-content.active {
    display: block;
}

/* Section headers */
.section-title {
    font-size: 24px;
    font-weight: bold;
    color: #2ecc71;
    border-bottom: 2px solid #2ecc71;
    padding-bottom: 10px;
    margin-bottom: 20px;
}

/* Cards  for displaying stats */
.card-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
    margin-bottom: 20px;
}

.card {
    background-color: #1e1e1e;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
}

.card-title {
    font-weight: bold;
    color: #ddd;
    margin-bottom: 10px;
    font-size: 1.1em;
}

/* Big number stats on cards */
.big-stat {
    font-size: 26px;
    font-weight: bold;
    color: #2ecc71;
    margin: 10px 0;
}

/* Chart container */
.chart-container {
    background-color: #1e1e1e;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 20px;
    height: 400px;
}

.chart-title {
    color: #ddd;
    margin-bottom: 10px;
    font-weight: bold;
    font-size: 1.2em;
}

/* Buttons  */
.btn {
    background-color: #2ecc71;
    color: #fff;
    border: none;
    padding: 10px 20px;
    border-radius: 4px;
    cursor: pointer;
    text-decoration: none;
    display: inline-block;
    font-size: 16px;
}

.btn:hover {
    background-color: #27ae60;
}

.btn-small {
    padding: 6px 12px;
    font-size: 14px;
}

/* Form styling */
.form-group {
    margin-bottom: 15px;
}

.form-group label {
    display: block;
    margin-bottom: 5px;
    color: #ddd;
    font-size: 16px;
}

.form-group input,
.form-group select,
.form-group textarea {
    width: 100%;
    padding: 10px;
    border-radius: 4px;
    border: 1px solid #333;
    background-color: #2d2d2d;
    color: #ddd;
    font-size: 16px;
}

/* Modal popup for editing bookings */
.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7);
}

.modal-content {
    background-color: #1e1e1e;
    margin: 5% auto;
    padding: 30px;
    width: 70%;
    max-width: 700px;
    border-radius: 8px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
    position: relative;
}

/* Close button for modal */
.close-modal {
    position: absolute;
    right: 20px;
    top: 15px;
    font-size: 24px;
    cursor: pointer;
    color: #aaa;
}

.close-modal:hover {
    color: #fff;
}
#################################################################################### dashboard.js ####################################################################################
document.addEventListener('DOMContentLoaded', function() {

  const tabLinks = document.querySelectorAll('.tab-link');
  const tabContents = document.querySelectorAll('.tab-content');


  function activateTab(tabId) {

    tabLinks.forEach(tab => tab.classList.remove('active'));
    tabContents.forEach(content => content.classList.remove('active'));


    const tabLink = document.querySelector(`.tab-link[data-tab="${tabId}"]`);
    const tabContent = document.getElementById(tabId);

    if (tabLink && tabContent) {
      tabLink.classList.add('active');
      tabContent.classList.add('active');
    }
  }


  tabLinks.forEach(link => {
    link.addEventListener('click', function(e) {
      e.preventDefault();
      const tabId = this.getAttribute('data-tab');
      activateTab(tabId);
    });
  });


  activateTab('bookings');


  const datesDataElement = document.getElementById('dates-data');
  const valuesDataElement = document.getElementById('values-data');

  if (datesDataElement && valuesDataElement) {
      const dates = JSON.parse(datesDataElement.textContent);
      const values = JSON.parse(valuesDataElement.textContent);

      const configureChart = (ctx, type, labels, data, backgroundColor, borderColor) => {
          new Chart(ctx, {
              type: type,
              data: {
                  labels: labels,
                  datasets: [{
                      label: 'Energy Usage (kWh)',
                      data: data,
                      backgroundColor: backgroundColor,
                      borderColor: borderColor,
                      borderWidth: 2,
                  }]
              },
              options: {
                  responsive: true,
                  maintainAspectRatio: false,
                  scales: {
                      y: {
                          beginAtZero: true,
                          grid: {color: 'rgba(255,255,255,0.1)'},
                          ticks: {color: '#ddd'}
                      },
                      x: {
                          grid: {color: 'rgba(255,255,255,0.1)'},
                          ticks: {color: '#ddd'}
                      }
                  },
                  plugins: {
                      legend: {
                          labels: {color: '#ddd'}
                      }
                  }
              }
          });
      };


      const overviewChartCanvas = document.getElementById('overviewChart');
      if (overviewChartCanvas) {
          configureChart(overviewChartCanvas.getContext('2d'), 'line', dates, values, 'rgba(46, 204, 113, 0.2)', '#2ecc71');
      }


      const energyChartCanvas = document.getElementById('energyChart');
      if (energyChartCanvas) {
          configureChart(energyChartCanvas.getContext('2d'), 'bar', dates, values, 'rgba(46, 204, 113, 0.7)', '#27ae60');
      }
  }


  const editModal = document.getElementById('editModal');
  const closeModalButton = document.querySelector('.close-modal');
  const editButtons = document.querySelectorAll('.edit-btn');

  editButtons.forEach(button => {
    button.addEventListener('click', function() {
      const bookingId = this.getAttribute('data-booking-id');
      const serviceType = this.getAttribute('data-service-type');
      const fullName = this.getAttribute('data-full-name');
      const email = this.getAttribute('data-email');
      const date = this.getAttribute('data-date');
      const description = this.getAttribute('data-description');
      

      document.getElementById('edit_booking_id').value = bookingId;
      document.getElementById('editServiceType').value = serviceType;
      document.getElementById('editFullName').value = fullName;
      document.getElementById('editEmail').value = email;
      document.getElementById('editDate').value = date;
      document.getElementById('editDescription').value = description;
      

      editModal.style.display = 'block';
    });
  });


  if (closeModalButton) {
    closeModalButton.addEventListener('click', function() {
      editModal.style.display = 'none';
    });
  }
  

  window.addEventListener('click', function(event) {
    if (event.target === editModal) {
      editModal.style.display = 'none';
    }
  });
});
#################################################################################### views.py ####################################################################################
from datetime import datetime, timedelta
import random
import json
from django.contrib.auth.decorators import login_required
from .models import Booking, EnergyUsage
from django.contrib.auth import update_session_auth_hash

from django.shortcuts import render, redirect
from django.contrib.auth import authenticate, login
from .forms import RegisterForm, LoginForm
from django.contrib.auth.models import User
from django.contrib.auth.decorators import login_required 
from .models import Feature, Booking
from .forms import BookingForm

from datetime import datetime, timedelta
import random
import json
from django.contrib.auth.decorators import login_required
from .models import Booking, EnergyUsage
from django.contrib.auth import update_session_auth_hash
# Create your views here.
def login_register(request):
    if request.method == 'POST':
        if 'register' in request.POST:
            register_form = RegisterForm(request.POST)
            login_form = LoginForm()
            if register_form.is_valid():
                user = register_form.save(commit=False)
                user.set_password(register_form.cleaned_data['password'])
                user.save()
                return redirect('home')
        elif 'login' in request.POST:
            login_form = LoginForm(request, data=request.POST)
            register_form = RegisterForm()
            if login_form.is_valid():
                user = login_form.get_user()
                login(request, user)
                return redirect('home')  

    else:
        register_form = RegisterForm()
        login_form = LoginForm()

    return render(request, 'login_register.html', {
        'register_form': register_form,
        'login_form': login_form,
    })

def home(request):
    return render(request, 'home.html')
def logout(request):
    return render(request, 'home.html')
@login_required(login_url='loginregister')
def bookingservice(request):
    success = False
    
    if request.method == 'POST':
        service_type = request.POST.get('serviceType')
        full_name = request.POST.get('fullName')
        email = request.POST.get('email')
        date = request.POST.get('date')
        description = request.POST.get('description')
        
     
        booking = Booking(
            user=request.user,  
            service_type=service_type,
            full_name=full_name,
            email=email,
            date=date,
            description=description
        )
        booking.save()
        
        success = True
    
    return render(request, 'bookingservice.html', {'success': success})
    

@login_required(login_url='loginregister')
def dashboard(request):

    today = datetime.now().date()
    

    bookings = Booking.objects.filter(user=request.user).order_by('date')
    upcoming_bookings = bookings.filter(date__gte=today)[:3]
    

    dates = []
    values = []
    

    for i in range(7):
        date = today - timedelta(days=6-i)
        dates.append(date.strftime('%b %d'))

        value = round(random.uniform(10, 20), 1)
        values = values + [value]
    

    total_energy = sum(values)
    avg_daily = total_energy / 7 if values else 0
    max_value = max(values) if values else 0
    min_value = min(values) if values else 0
    
    context = {
        'bookings': bookings,
        'upcoming_bookings': upcoming_bookings,
        'dates_json': json.dumps(dates),
        'values_json': json.dumps(values),
        'total_energy': round(total_energy, 1),
        'avg_daily': round(avg_daily, 1),
        'max_value': round(max_value, 1),
        'min_value': round(min_value, 1)
    }
    
    return render(request, 'dashboard.html', context)

def create_sample_energy_data(user):
    """Create sample energy data for demonstration"""
    today = datetime.now().date()
    

    for i in range(30, 0, -1):
        date = today - timedelta(days=i)

        value = 15 + 10 * (0.5 + 0.5 * (i % 7) / 6) + random.uniform(-3, 3)
        EnergyUsage.objects.create(
            user=user,
            date=date,
            value=round(value, 2)
        )

@login_required(login_url='loginregister')
def add_energy_data(request):
    if request.method == 'POST':
        date = request.POST.get('date')
        value = float(request.POST.get('value'))
        

        EnergyUsage.objects.create(
            user=request.user,
            date=date,
            value=value
        )
        
        return redirect('dashboard')
    
    return redirect('dashboard')

@login_required(login_url='loginregister')
def edit_booking(request):
    if request.method == 'POST':
        booking_id = request.POST.get('booking_id')
        
        if booking_id:
            booking = Booking.objects.get(id=booking_id, user=request.user)
            booking.service_type = request.POST.get('serviceType')
            booking.full_name = request.POST.get('fullName')
            booking.email = request.POST.get('email')
            booking.date = request.POST.get('date')
            booking.description = request.POST.get('description')
            booking.save()
        
        return redirect('dashboard')
    
    return redirect('dashboard')

@login_required(login_url='loginregister')
def update_account(request):
    if request.method == 'POST':
        user = request.user
        user.first_name = request.POST.get('first_name')
        user.last_name = request.POST.get('last_name')
        user.email = request.POST.get('email')
        

        current_password = request.POST.get('current_password')
        new_password = request.POST.get('new_password')
        confirm_password = request.POST.get('confirm_password')
        
        if current_password and new_password and confirm_password:
            if user.check_password(current_password) and new_password == confirm_password:
                user.set_password(new_password)
                update_session_auth_hash(request, user)
        
        user.save()
        
        return redirect('dashboard')
    
    return redirect('dashboard')


#################################################################################### models.py ####################################################################################
from datetime import datetime

class EnergyUsage(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    date = models.DateField()
    value = models.FloatField(help_text="Energy usage in kWh")
    
    def __str__(self):
        return f"{self.user.username} - {self.date} - {self.value}kWh"
#################################################################################### urls.py ####################################################################################

path('dashboard/', views.dashboard, name='dashboard'),
path('add-energy-data/', views.add_energy_data, name='add_energy_data'),
path('edit-booking/', views.edit_booking, name='edit_booking'),
path('update-account/', views.update_account, name='update_account'),
